//ECE 385 USB Host Shield code
//based on Circuits-at-home USB Host code 1.x
//to be used for ECE 385 course materials
//Revised October 2020 - Zuofu Cheng

#include <stdio.h>
#include <math.h>
#include <stdint.h>
#include "system.h"
#include "altera_avalon_spi.h"
#include "altera_avalon_spi_regs.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"
#include "usb_kb/GenericMacros.h"
#include "usb_kb/GenericTypeDefs.h"
#include "usb_kb/HID.h"
#include "usb_kb/MAX3421E.h"
#include "usb_kb/transfer.h"
#include "usb_kb/usb_ch9.h"
#include "usb_kb/USB.h"
#include "player.h"

extern HID_DEVICE hid_device;

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

BYTE GetDriverandReport() {
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
		tpl_ptr = GetDevtable(i);
		if (tpl_ptr->epinfo != NULL) {
			printf("Device: %d", i);
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
	if (rcode) {   //error handling
		printf("GetIdle Error. Error code: ");
		printf("%x \n", rcode);
	} else {
		printf("Update rate: ");
		printf("%x \n", tmpbyte);
	}
	printf("Protocol: ");
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
	if (rcode) {   //error handling
		printf("GetProto Error. Error code ");
		printf("%x \n", rcode);
	} else {
		printf("%d \n", tmpbyte);
	}
	return device;
}

void setLED(int LED) {
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}

void clearLED(int LED) {
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}

void printSignedHex0(signed char value) {
	BYTE tens = 0;
	BYTE ones = 0;
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
	if (value < 0) {
		setLED(11);
		value = -value;
	} else {
		clearLED(11);
	}
	//handled hundreds
	if (value / 100)
		setLED(13);
	else
		clearLED(13);

	value = value % 100;
	tens = value / 10;
	ones = value % 10;

	pio_val &= 0x00FF;
	pio_val |= (tens << 12);
	pio_val |= (ones << 8);

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
}

void printSignedHex1(signed char value) {
	BYTE tens = 0;
	BYTE ones = 0;
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
	if (value < 0) {
		setLED(10);
		value = -value;
	} else {
		clearLED(10);
	}
	//handled hundreds
	if (value / 100)
		setLED(12);
	else
		clearLED(12);

	value = value % 100;
	tens = value / 10;
	ones = value % 10;
	tens = value / 10;
	ones = value % 10;

	pio_val &= 0xFF00;
	pio_val |= (tens << 4);
	pio_val |= (ones << 0);

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
}

void setKeycode(WORD keycode)
{
	// what I changed for the keycode
	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode);
}

int isPressed(BOOT_KBD_REPORT kbdbuf, int keycode){
	if(kbdbuf.keycode[0] == keycode || kbdbuf.keycode[1] == keycode || kbdbuf.keycode[2] == keycode
			|| kbdbuf.keycode[3] == keycode || kbdbuf.keycode[4] == keycode || kbdbuf.keycode[5] == keycode){
		return 1;
	}
	else
		return 0;
}

void setmotion(struct player* p){
	//	 Player motion decision
	switch(*(p->dir)){
	case 0:
		p->motion_x = 0;
		p->motion_y = -3;
		break;
	case 1:
		p->motion_x = -1;
		p->motion_y = -3;
		break;
	case 2:
		p->motion_x = -2;
		p->motion_y = -2;
		break;
	case 3:
		p->motion_x = -3;
		p->motion_y = -1;
		break;
	case 4:
		p->motion_x = -3;
		p->motion_y = 0;
		break;
	case 5:
		p->motion_x = -3;
		p->motion_y = 1;
		break;
	case 6:
		p->motion_x = -2;
		p->motion_y = 2;
		break;
	case 7:
		p->motion_x = -1;
		p->motion_y = 3;
		break;
	case 8:
		p->motion_x = 0;
		p->motion_y = 3;
		break;
	case 9:
		p->motion_x = 1;
		p->motion_y = 3;
		break;
	case 10:
		p->motion_x = 2;
		p->motion_y = 2;
		break;
	case 11:
		p->motion_x = 3;
		p->motion_y = 1;
		break;
	case 12:
		p->motion_x = 3;
		p->motion_y = 0;
		break;
	case 13:
		p->motion_x = 3;
		p->motion_y = -1;
		break;
	case 14:
		p->motion_x = 2;
		p->motion_y = -2;
		break;
	case 15:
		p->motion_x = 1;
		p->motion_y = -3;
		break;
	}
}

int isOnscreen(int x, int y){
	if(x > 640 || y > 480){
		return 0;
	}
	return 1;
}

void update_missile(BOOT_KBD_REPORT kbdbuf, struct player* p, struct counters* pcounter, int shoot, struct Game* g){
	if(isPressed(kbdbuf, shoot) && isOnscreen(*(p->missile_x), *(p->missile_y)) == 0){
		*(p->missile_x) = *(p->x_loc) + 16;
		*(p->missile_y) = *(p->y_loc) + 16;
		p->missile_state = 0;
		p->missile_bounce = 0;
	}
	else if(pcounter->missile_motion_counter == 2 && p->missile_state == 0){
		p->missile_x_prev = *(p->missile_x);
		p->missile_y_prev = *(p->missile_y);
		p->missile_motion_x = 2 * p->motion_x;
		p->missile_motion_y = 2 * p->motion_y;
		*(p->missile_x) += p->missile_motion_x;
		*(p->missile_y) += p->missile_motion_y;
		p->missile_motion_x_prev = p->missile_motion_x;
		p->missile_motion_y_prev = p->missile_motion_y;
		pcounter->missile_motion_counter = 0;
	}
	else if(pcounter->missile_motion_counter == 2 && p->missile_state == 1 && p->missile_bounce < 5){
		if(*(p->missile_collision) == 1){
			*(p->missile_x) = p->missile_x_prev;
			*(p->missile_y) = p->missile_y_prev;
			if(p->missile_motion_y == 0){
				p->missile_motion_x = 0;
				p->missile_motion_y = (p->missile_motion_x_prev);
			}
			else if(p->missile_motion_x == 0){
				p->missile_motion_x = (p->missile_motion_y_prev);
				p->missile_motion_y = 0;
			}
			else{
				double theta;
				if((p->missile_motion_x < 0 && p->missile_motion_y < 0) || (p->missile_motion_x < 0 && p->missile_motion_y > 0))
					theta = (int)((atan(p->missile_motion_x / p->missile_motion_y) * 180 / M_PI) - 180 )% 360;
				else
					theta = atan(p->missile_motion_x / p->missile_motion_y) * 180 / M_PI;
				double theta_ball = 90 - theta;
				p->missile_motion_x = *(g->cos + (int)theta_ball) * 4;
				p->missile_motion_y = *(g->sin + (int)theta_ball) * 4;
			}
//			p->missile_motion_x = -1*(p->missile_motion_x_prev);
//			p->missile_motion_y = -1*(p->missile_motion_y_prev);
			*(p->missile_x) += p->missile_motion_x;
			*(p->missile_y) += p->missile_motion_y;
			(p->missile_motion_x_prev) = p->missile_motion_x;
			(p->missile_motion_y_prev) = p->missile_motion_y;
			p->missile_bounce += 1;
		}
		else{
			p->missile_x_prev = *(p->missile_x);
			p->missile_y_prev = *(p->missile_y);
			*(p->missile_x) += p->missile_motion_x;
			*(p->missile_y) += p->missile_motion_y;
		}
		pcounter->missile_motion_counter = 0;

	}
	else if(isOnscreen(*(p->missile_x), *(p->missile_y)) == 0 || p->missile_bounce == 5){
		*(p->missile_x) = 700;
		*(p->missile_y) = 700;
		p->missile_motion_x = 0;
		p->missile_motion_y = 0;
		p->missile_state = 0;
	}
	if(pcounter->missile_motion_counter > 2)
		pcounter->missile_motion_counter = 0;
	else
		pcounter->missile_motion_counter += 1;
}

void update_player(BOOT_KBD_REPORT kbdbuf, struct player* p, struct counters* pcounter, int left, int right, int forward, int backward){

	p->dir_prev = *(p->dir);
	if(isPressed(kbdbuf, left))
		p->left = 1;
	else
		p->left = 0;

	if(isPressed(kbdbuf, right))
		p->right = 1;
	else
		p->right = 0;

	// Increment player 1 direction state by 1 if left has rising edge
	if(p->left && p->left != p->left_prev){
		*(p->dir) = p->dir_prev + 1;
		pcounter->state_counter = 0;
	}
	// Decrement player 1 direction state by 1 if right has rising edge
	else if(p->right && p->right != p->right_prev){
		*(p->dir) = p->dir_prev - 1;
		pcounter->state_counter = 0;
	}
	// if left/right is pressed longer than the counter limit, it also counts as a valid input
	if(p->left && pcounter->state_counter >= STATE_COUNTER){
		*(p->dir) = p->dir_prev + 1;
		pcounter->state_counter = 0;
	}
	else if(p->right && pcounter->state_counter >= STATE_COUNTER){
		*(p->dir) = p->dir_prev - 1;
		pcounter->state_counter = 0;
	}
	// update state counter, previous left and right value
	pcounter->state_counter += 1;
	*(p->dir) &= 0x0f;
	p->left_prev = p->left;
	p->right_prev = p->right;

	// set motion(velocity) vector based on direction of the player
	setmotion(p);

	// move player based on forward backward key
	if(	isPressed(kbdbuf, forward) && pcounter->motion_counter == PLAYER_MOTION_COUNTER){
		if(*(p->collision) == 0 && p->collision_prev == 0){
			p->x_loc_prev = *(p->x_loc);
			p->y_loc_prev = *(p->y_loc);
			*(p->x_loc) += p->motion_x;
			*(p->y_loc) += p->motion_y;
		}
		else{
			*(p->x_loc) = p->x_loc_prev;
			*(p->y_loc) = p->y_loc_prev;
		}
		pcounter->motion_counter = 0;
	}
	else if(isPressed(kbdbuf, backward) && pcounter->motion_counter == PLAYER_MOTION_COUNTER){
		if(*(p->collision) == 0){ //&& p->collision_prev == 0
			p->x_loc_prev = *(p->x_loc);
			p->y_loc_prev = *(p->y_loc);
			*(p->x_loc) -= p->motion_x;
			*(p->y_loc) -= p->motion_y;
		}
		else{
			*(p->x_loc) = p->x_loc_prev;
			*(p->y_loc) = p->y_loc_prev;
		}
		pcounter->motion_counter = 0;
	}
	if(pcounter->motion_counter >20)
		pcounter->motion_counter = 0;
	else
		pcounter->motion_counter += 1;

	// update animation
	if(p->anim_enum != NULL){
		if(pcounter->sprite_anim_counter > PLAYER_ANIM_COUNTER){
			*(p->anim_enum) += 1;
			pcounter->sprite_anim_counter = 0;
		}
		else{
			pcounter->sprite_anim_counter += 1;
		}
		if(*(p->anim_enum) > 4){
			*(p->anim_enum) = 0;
		}
	}
}

void missileStatehandler(struct player* p){
	if(*(p->missile_collision) == 1 && *(p->missile_x) != OUT_OF_SCREEN && *(p->missile_y) != OUT_OF_SCREEN){
		p->missile_state = 1;

	}
}
void update_ui_anim(struct Game* g, struct counters* pcounter){
	g->ui_anim_enum_prev = *(g->ui_anim_enum);
	if(pcounter->ui_anim_counter > UI_ANIM_COUNTER){
		*(g->ui_anim_enum) += 1;
		pcounter->ui_anim_counter = 0;
	}
	if(*(g->ui_anim_enum) > 14){
		*(g->ui_anim_enum) = 0;
	}
	pcounter->ui_anim_counter += 1;
}

void setLoc(struct player* p, int x, int y){
	*(p->x_loc) = x;
	*(p->y_loc) = y;
}

void updateScore(struct Game* g, int score1, int score2){
	*(g->score_p1) = score1;
	*(g->score_p2) = score2;
}

int isHit(struct Game* g){
	if(*(g->hit_p1) && *(g->hit_p1) != g->hit_p1_prev)
		return 1;
	else if(*(g->hit_p2) && *(g->hit_p2) != g->hit_p2_prev)
		return 2;
	else
		return 0;
}

void playExplosion(struct Game* g){
	if (*(g->explosion_enum) == 0){
		for(int i = 0; i < 5; i++){
			*(g->explosion_enum) = i;
			for(int counter = 0; counter < 30000; counter++);
		}
	}
	else
		return;
}

// reset p1's location and p2's missile location
void reset_player(struct player* p1, struct player* p2, int player_idx){
	*(p1->missile_x) = 700;
	*(p2->missile_x) = 700;
	*(p1->missile_y) = 700;
	*(p2->missile_y) = 700;
	(p1->missile_motion_x) = 700;
	(p2->missile_motion_x) = 700;
	(p1->missile_motion_y) = 700;
	(p2->missile_motion_y) = 700;
	*(p1->dir) = 0;
	if(player_idx == 1){
		*(p1->x_loc) = PLAYER1_START_X;
		*(p1->y_loc) = PLAYER1_START_Y;
	}
	else{
		*(p1->x_loc) = PLAYER2_START_X;
		*(p1->y_loc) = PLAYER2_START_Y;
	}
}
// game state enum
enum game_state {HALT, INGAME, PLAYER1_SCORES, PLAYER2_SCORES, PLAYER1_WINS, PLAYER2_WINS};

int main() {
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
	BYTE device;
	//WORD keycode;

	// initialize sin and cos array
	double _sin[359];
	double _cos[359];
	for(int i = 0; i < 360; i++){
		_sin[i] = sin(i*M_PI/180);
		_cos[i] = cos(i*M_PI/180);
	}

	//initialize game struct
	struct Game game;
	game.ui_anim_enum = MARINE_ENUM_BASE; *(game.ui_anim_enum) = 0;
	game.score_p1 = SCOREP1_BASE; *(game.score_p1) = 0x30;
	game.score_p2 = SCOREP2_BASE; *(game.score_p2) = 0x30;
	game.hit_p1 = P1_HIT_BASE; game.hit_p1_prev = *(game.hit_p1 = P1_HIT_BASE);
	game.hit_p2 = P2_HIT_BASE; game.hit_p1_prev = *(game.hit_p2 = P2_HIT_BASE);
	game.curr_game_state = HALT;
	game.explosion_enum = EXPLOSION_ENUM_BASE; *(game.explosion_enum) = 1;
	game.explosion_x = EXPLOSION_X_BASE; *(game.explosion_x) = OUT_OF_SCREEN;
	game.explosion_y = EXPLOSION_Y_BASE; *(game.explosion_y) = OUT_OF_SCREEN;
	game.sin = _sin;
	game.cos = _cos;

	struct Game* gptr = &game;

	// Initialize player 1 struct
	struct player player1;
	player1.x_loc = PLAYER1X_BASE; *(player1.x_loc) = 50;
	player1.y_loc = PLAYER1Y_BASE; *(player1.y_loc) = 240;
	player1.x_loc_prev = *(player1.x_loc);
	player1.y_loc_prev = *(player1.y_loc);
	player1.motion_x = 0; player1.motion_y = 0;
	player1.dir = SPRITE_ENUM_BASE; *(player1.dir) = 0;
	player1.dir_prev = *(player1.dir);
	player1.anim_enum = NULL;
	player1.missile_x = MISSILE1_X_BASE; *(player1.missile_x) = OUT_OF_SCREEN; player1.missile_x_prev = OUT_OF_SCREEN;
	player1.missile_y = MISSILE1_Y_BASE; *(player1.missile_y) = OUT_OF_SCREEN; player1.missile_y_prev = OUT_OF_SCREEN;
	player1.missile_motion_x = 0;
	player1.missile_motion_y = 0;
	player1.collision = COLLISIONP1_BASE;
	player1.collision_prev = *(player1.collision);
	player1.missile_collision = COLLISION_MS1_BASE;
	player1.missile_collision_prev = *(player1.missile_collision);
	player1.left = 0;
	player1.left_prev = 0;
	player1.right = 0;
	player1.left_prev = 0;
	player1.missile_state = 0;
	player1.missile_bounce = 0;

	struct player* p1ptr = &player1;

	// initialize player 2 struct
	struct player player2;
	player2.x_loc = PLAYER2X_BASE; *(player2.x_loc) = 558;
	player2.y_loc = PLAYER2Y_BASE; *(player2.y_loc) = 240;
	player2.x_loc_prev = *(player2.x_loc);
	player2.y_loc_prev = *(player2.y_loc);
	player2.motion_x = 0;
	player2.motion_y = 0;
	player2.dir = SPRITE_ENUM2_BASE;
	player2.dir_prev = *(player2.dir); *(player2.dir) = 0;
	player2.anim_enum = SPRITE2_ANIMATION_BASE; *(player2.anim_enum) = 0;
	player2.missile_x = MISSILE2_X_BASE; *(player2.missile_x) = OUT_OF_SCREEN; player2.missile_x_prev = OUT_OF_SCREEN;
	player2.missile_y = MISSILE2_Y_BASE; *(player2.missile_y) = OUT_OF_SCREEN; player2.missile_y_prev = OUT_OF_SCREEN;
	player2.missile_motion_x = 0;
	player2.missile_motion_y = 0;
	player2.collision = COLLISIONP2_BASE;
	player2.collision_prev = *(player2.collision);
	player2.missile_collision = COLLISION_MS2_BASE;
	player2.missile_collision_prev = *(player2.missile_collision);
	player2.left = 0;
	player2.left_prev = 0;
	player2.right = 0;
	player2.right_prev = 0;
	player2.missile_state = 0;
	player2.missile_bounce = 0;

	struct player* p2ptr = &player2;

	// initialize counters used within the game
	struct counters p1counter;
	p1counter.motion_counter = 0;
	p1counter.state_counter = 0;
	p1counter.sprite_anim_counter = 0;
	p1counter.ui_anim_counter = 0;
	p1counter.missile_motion_counter = 0;

	struct counters* p1cntptr = &p1counter;

	struct counters p2counter;
	p2counter.motion_counter = 0;
	p2counter.state_counter = 0;
	p2counter.sprite_anim_counter = 0;
	p2counter.ui_anim_counter = 0;
	p2counter.missile_motion_counter = 0;

	struct counters* p2cntptr = &p2counter;

	int* key = KEY_BASE;
	int key_prev = *key;

	printf("HEXDIGIT: %x\n\n", HEX_DIGITS_PIO_BASE);
	printf("LED: %x\n\n", LEDS_PIO_BASE);
	printf("initializing MAX3421E...\n");
	MAX3421E_init();
	printf("initializing USB...\n");
	printf("Testing read function....\n");
	int ret_val = MAXreg_rd(rREVISION);
	printf("output: %x", ret_val);
	USB_init();
	while (1) {
		//printf(".");
		setKeycode(kbdbuf.keycode[0]);
		printSignedHex0(kbdbuf.keycode[0]);
		printSignedHex1(kbdbuf.keycode[1]);
		if(game.curr_game_state == HALT){
			setLoc(p1ptr, 50, 240);
			setLoc(p2ptr, 558, 240);
			// Reset values
			*(player1.missile_x) = 700;
			*(player2.missile_x) = 700;
			*(player1.missile_y) = 700;
			*(player2.missile_y) = 700;
			(player1.missile_motion_x) = 700;
			(player2.missile_motion_x) = 700;
			(player1.missile_motion_y) = 700;
			(player2.missile_motion_y) = 700;
			*(player2.dir) = 0;
			*(player1.dir) = 0;
			updateScore(gptr, 0x56, 0x53);
			if(*key == 1 && key_prev != 1){
				game.curr_game_state = INGAME;
				updateScore(gptr, 0x30, 0x30);
			}
		}
		else if(game.curr_game_state == INGAME){
			// player 1 movement logic
			update_player(kbdbuf, p1ptr, p1cntptr, 04, 07, 26, 22);
			missileStatehandler(p1ptr);
			update_missile(kbdbuf, p1ptr, p1cntptr, 44, gptr);

			// player 2 movement logic
			update_player(kbdbuf, p2ptr, p2cntptr, 80, 79, 82, 81);
			missileStatehandler(p2ptr);
			update_missile(kbdbuf, p2ptr, p2cntptr, 56, gptr);

			// update ui animation
			update_ui_anim(gptr, p1cntptr);

			// detect hits
			if (isHit(gptr) == 1){
				*(game.explosion_enum) = 0;
				game.curr_game_state = PLAYER2_SCORES;
			}
			else if(isHit(gptr) == 2){
				*(game.explosion_enum) = 0;
				game.curr_game_state = PLAYER1_SCORES;
			}
			game.hit_p1_prev = *(game.hit_p1);
			game.hit_p2_prev = *(game.hit_p2);
		}
		else if(game.curr_game_state == PLAYER1_SCORES){
			*(game.explosion_x) = *(player2.x_loc);
			*(game.explosion_y) = *(player2.y_loc) + 4;
			*(player2.x_loc) = OUT_OF_SCREEN;
			*(player2.y_loc) = OUT_OF_SCREEN;
			*(player1.missile_x) = OUT_OF_SCREEN;
			*(player1.missile_y) = OUT_OF_SCREEN;
			playExplosion(gptr);
			if(*(game.score_p1) == 0x39){
				updateScore(gptr, 0x57, 0x4c);
				game.next_game_state = PLAYER1_WINS;
			}
			else{
				updateScore(gptr, *(game.score_p1) + 1, *(game.score_p2));
				game.next_game_state = INGAME;
			}
			//while(*key != 1 || key_prev == 1);
			reset_player(p2ptr, p1ptr, 2);
			for(int i = 0; i < 5; i++){
				*(player2.x_loc) = OUT_OF_SCREEN;
				*(player2.y_loc) = OUT_OF_SCREEN;
				for(int j = 0; j < 40000; j++);
				*(player2.x_loc) = PLAYER2_START_X;
				*(player2.y_loc) = PLAYER2_START_Y;
				for(int j = 0; j < 40000; j++);
			}
			*(game.explosion_x) = OUT_OF_SCREEN;
			*(game.explosion_y) = OUT_OF_SCREEN;
			game.curr_game_state = game.next_game_state;
		}
		else if(game.curr_game_state == PLAYER2_SCORES){
			*(game.explosion_x) = *(player1.x_loc);
			*(game.explosion_y) = *(player1.y_loc) + 4;
			*(player1.x_loc) = OUT_OF_SCREEN;
			*(player1.y_loc) = OUT_OF_SCREEN;
			*(player2.missile_x) = OUT_OF_SCREEN;
			*(player2.missile_y) = OUT_OF_SCREEN;
			playExplosion(gptr);
			if(*(game.score_p2) == 0x39){
				updateScore(gptr, 0x4c, 0x57);
				game.next_game_state = PLAYER2_WINS;
			}
			else{
				updateScore(gptr, *(game.score_p1), *(game.score_p2) + 1);
				game.next_game_state = INGAME;
			}
			//while(*key != 1 || key_prev == 1);
			reset_player(p1ptr, p2ptr, 1);
			for(int i = 0; i < 5; i++){
				*(player1.x_loc) = OUT_OF_SCREEN;
				*(player1.y_loc) = OUT_OF_SCREEN;
				for(int j = 0; j < 40000; j++);
				*(player1.x_loc) = PLAYER1_START_X;
				*(player1.y_loc) = PLAYER1_START_Y;
				for(int j = 0; j < 40000; j++);
			}
			*(game.explosion_x) = OUT_OF_SCREEN;
			*(game.explosion_y) = OUT_OF_SCREEN;
			game.curr_game_state = game.next_game_state;
		}
		else if(game.curr_game_state == PLAYER1_WINS){
			updateScore(gptr, 0x57, 0x4c);
			if(*key == 1 && key_prev != 1){
				setLoc(p1ptr, 50, 240);
				setLoc(p2ptr, 558, 240);
				// Reset values
				*(player1.missile_x) = 700;
				*(player2.missile_x) = 700;
				*(player1.missile_y) = 700;
				*(player2.missile_y) = 700;
				(player1.missile_motion_x) = 700;
				(player2.missile_motion_x) = 700;
				(player1.missile_motion_y) = 700;
				(player2.missile_motion_y) = 700;
				*(player2.dir) = 0;
				*(player1.dir) = 0;
				game.curr_game_state = INGAME;
			}
		}
		else if(game.curr_game_state == PLAYER2_WINS){
			updateScore(gptr, 0x4c, 0x57);
			if(*key == 1 && key_prev != 1){
				updateScore(gptr, 0x30, 0x30);
				setLoc(p1ptr, 50, 240);
				setLoc(p2ptr, 558, 240);
				// Reset values
				*(player1.missile_x) = 700;
				*(player2.missile_x) = 700;
				*(player1.missile_y) = 700;
				*(player2.missile_y) = 700;
				(player1.missile_motion_x) = 700;
				(player2.missile_motion_x) = 700;
				(player1.missile_motion_y) = 700;
				(player2.missile_motion_y) = 700;
				*(player2.dir) = 0;
				*(player1.dir) = 0;
				game.curr_game_state = INGAME;
			}
		}

		if(*key == 2 && key_prev != *key){
			game.curr_game_state = HALT;
		}
		key_prev = *key;
		MAX3421E_Task();
		USB_Task();
		//usleep (500000);
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
			if (!runningdebugflag) {
				runningdebugflag = 1;
				setLED(9);
				device = GetDriverandReport();
			} else if (device == 1) {
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
				if (rcode == hrNAK) {
					continue; //NAK means no new data
				} else if (rcode) {
					printf("Rcode: ");
					printf("%x \n", rcode);
					continue;
				}
//				printf("keycodes: ");
//				for (int i = 0; i < 6; i++) {
//					printf("%x ", kbdbuf.keycode[i]);
//				}
			}

			else if (device == 2) {
				rcode = mousePoll(&buf);
				if (rcode == hrNAK) {
					//NAK means no new data
					continue;
				} else if (rcode) {
					printf("Rcode: ");
					printf("%x \n", rcode);
					continue;
				}
				printf("X displacement: ");
				printf("%d ", (signed char) buf.Xdispl);
				printSignedHex0((signed char) buf.Xdispl);
				printf("Y displacement: ");
				printf("%d ", (signed char) buf.Ydispl);
				printSignedHex1((signed char) buf.Ydispl);
				printf("Buttons: ");
				printf("%x\n", buf.button);
				if (buf.button & 0x04)
					setLED(2);
				else
					clearLED(2);
				if (buf.button & 0x02)
					setLED(1);
				else
					clearLED(1);
				if (buf.button & 0x01)
					setLED(0);
				else
					clearLED(0);
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
			if (!errorflag) {
				errorflag = 1;
				clearLED(9);
				printf("USB Error State\n");
				//print out string descriptor here
			}
		} else //not in USB running state
		{

			printf("USB task state: ");
			printf("%x\n", GetUsbTaskState());
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
				runningdebugflag = 0;
				MAX3421E_init();
				USB_init();
			}
			errorflag = 0;
			clearLED(9);
		}

	}
	return 0;
}
